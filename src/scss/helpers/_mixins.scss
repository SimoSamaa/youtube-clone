@use './colors' as *;

@mixin colorsApp() {

    @each $color,
    $value in $colors {
        --clr-#{$color}: #{$value};
    }
}

@mixin themeColorsApp($themeMode) {
    @if($themeMode ==dark) {
        @media (prefers-color-scheme:dark) {

            @each $color,
            $value in $colors-dark_theme {
                --clr-#{$color}: #{$value};
            }
        }
    }

    @else if($themeMode ==light) {
        @media (prefers-color-scheme:light) {

            @each $color,
            $value in $colors-light_theme {
                --clr-#{$color}: #{$value};
            }
        }
    }
}

@mixin flexOptions($fx, $spa, $cen, $g) {
    display: $fx;
    justify-content: $spa;
    align-items: $cen;
    gap: $g;
}

@mixin gridOptions($gr, $cen ) {
    display: $gr;
    place-items: $cen;
}

@mixin positionOptions($type, $dir) {
    position: $type;
    inset: $dir;
}

@mixin visibilityOptions($vis, $opa) {
    visibility: $vis;
    opacity: $opa;
}

@mixin hoverFocusEffect($HF) {

    @if($HF ==hover) {
        &:hover {
            background-color: var(--clr-gray-hover);
        }
    }

    @else if($HF ==focus) {
        &:focus-visible {
            background-color: var(--clr-gray-hover);
        }
    }
}

@mixin inputRangeSupport() {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background-color: var(--clr-white);
    appearance: none;
}

@mixin breakPoint($point) {
    @if($point==tablite) {
        @media (max-width:650px) {
            @content;
        }
    }

    @else if($point ==mobile) {
        @media (max-width:550px) {
            @content;
        }
    }

    @else if($point ==largeScreen) {
        @media (max-width:1050px) {
            @content;
        }
    }
}